
package com.fym.lta.ui;

import com.fym.lta.bao.BaoFactory;
import com.fym.lta.bao.RoleBao;
import com.fym.lta.bao.ScreenBao;
import com.fym.lta.common.LTAException;
import com.fym.lta.dto.RoleDto;
import com.fym.lta.dto.ScreenDto;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author h.omar
 */
public class ScreenRoles extends javax.swing.JPanel {
    // creeate bussiness and dto objects
    RoleBao roleBaoObj = new BaoFactory().createRoleBao();
    ScreenBao screenBaoObj = new BaoFactory().createScreenBao();
    List<RoleDto> allRoles = new ArrayList();
    List<ScreenDto> selectedScreens = new ArrayList(); //hold the values of selected screens

    /** Creates new form ScreenRoles */
    public ScreenRoles() {
        initComponents();


        allRoles = roleBaoObj.getAll();
        setRolesCombo(allRoles);

        resetTableMod(screenBaoObj.getAll_Screen(allRoles.get(0)));
     
        // now one step we will create an object of ScreenBao to know the current permission
        int permissionType = new BaoFactory().createScreenBao().getCurrentPermission(10);
        Utilities.mandate(null, null, null, 10, Utilities.convertTOBase2(permissionType));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        roleCombo = new javax.swing.JComboBox();
        label1 = new java.awt.Label();
        jPanel7 = new javax.swing.JPanel();
        doneBtn = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        label2 = new java.awt.Label();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Screens", 0, 0, new java.awt.Font("Tekton Pro", 1, 36))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        usersTable.setFont(new java.awt.Font("Tekton Pro Cond", 1, 18)); // NOI18N
        usersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Screen", "View", "Delete", "Insert", "Update"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        usersTable.setRowHeight(30);
        jScrollPane1.setViewportView(usersTable);
        usersTable.getColumnModel().getColumn(0).setHeaderValue("ID");
        usersTable.getColumnModel().getColumn(1).setHeaderValue("Screen");
        usersTable.getColumnModel().getColumn(2).setHeaderValue("View");
        usersTable.getColumnModel().getColumn(3).setHeaderValue("Delete");
        usersTable.getColumnModel().getColumn(4).setHeaderValue("Insert");
        usersTable.getColumnModel().getColumn(5).setHeaderValue("Update");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(229, 126, 880, 550));

        roleCombo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        roleCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleComboActionPerformed(evt);
            }
        });
        add(roleCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 147, 30));

        label1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        label1.setText("Screen_Role Assignment Screen");
        add(label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(457, 12, 383, 55));

        doneBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        doneBtn.setText("Done");
        doneBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doneBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(doneBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 57, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(doneBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 476, Short.MAX_VALUE))
        );

        add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1115, 143, 210, 530));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 93, Short.MAX_VALUE)
        );

        add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1547, 1004, -1, -1));

        label2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        label2.setText("Role");
        add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 141, 27));
    }//GEN-END:initComponents

    private void doneBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneBtnMouseClicked
        try {
            boolean status =
                screenBaoObj.saveScreenRoles(readTableData(usersTable), allRoles.get(roleCombo.getSelectedIndex()));
            if (status)
                JOptionPane.showMessageDialog(this, "Saved ");
            else
                JOptionPane.showMessageDialog(this, "not Saved ");

        } catch (LTAException e) {
            JOptionPane.showMessageDialog(this, "not Saved ");

        }
    }//GEN-LAST:event_doneBtnMouseClicked

    private void roleComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleComboActionPerformed
      
    resetTableMod(screenBaoObj.getAll_Screen(allRoles.get(roleCombo.getSelectedIndex())));
     
    }//GEN-LAST:event_roleComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton doneBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private javax.swing.JComboBox roleCombo;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables



    // this function just to list the role data in roleCombo
    void setRolesCombo(List<RoleDto> roles) {
        for (int i = 0; i < roles.size(); i++) {
            roleCombo.addItem(roles.get(i).getCode()); // name not desc
        }

    }

    public void resetTableMod(List<ScreenDto> screens) {
        Object[][] screenArr = new Object[screens.size()][6];

        for (int i = 0; i < screens.size(); i++) {
            // View the screen description
            screenArr[i][0] = screens.get(i).getScreen_id();
            screenArr[i][1] = screens.get(i).getDescription();
            
            boolean [] permArray = null; // hold the value of permission as a boolean
            // convert permission to array of boolean
            int perm_base10 = screens.get(i).getRole_Screen().getPermissionType();
            permArray = Utilities.convertTOBase2(perm_base10);
            
            // set values
            if (permArray[0])
                screenArr[i][2] = Boolean.TRUE;
            else
                screenArr[i][2] = Boolean.FALSE;

            if (permArray[1])
                screenArr[i][3] = Boolean.TRUE;
            else
                screenArr[i][3] = Boolean.FALSE;

            if (permArray[2])
                screenArr[i][4] = Boolean.TRUE;
            else
                screenArr[i][4] = Boolean.FALSE;

            if (permArray[3])
                screenArr[i][5] = Boolean.TRUE;
            else
                screenArr[i][5] = Boolean.FALSE;
           

        }

        usersTable.setModel(new javax.swing.table.DefaultTableModel(screenArr, new String[] {
                                                                    "ID", "Screen", "View", "Delete", "Insert", "Update"
            }) {
                Class[] types = new Class[] {
                    java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class,
                    java.lang.Boolean.class, java.lang.Boolean.class
                };
                boolean[] canEdit = new boolean[] { false, false, true, true, true, true };

                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });

    }

    List<ScreenDto> readTableData(JTable usersTable) {
        List<ScreenDto> screens = new ArrayList<>();

        for (int i = 0; i < usersTable.getRowCount(); i++) {
            boolean[] permission_i = { false, false, false, false };

            // view status
            if (usersTable.getValueAt(i, 2) != null)
                permission_i[0] = Boolean.valueOf(usersTable.getValueAt(i, 2).toString());
            // delete status
            if (usersTable.getValueAt(i, 3) != null)
                permission_i[1] = Boolean.valueOf(usersTable.getValueAt(i, 3).toString());
            // insert status
            if (usersTable.getValueAt(i, 4) != null)
                permission_i[2] = Boolean.valueOf(usersTable.getValueAt(i, 4).toString());
            // update status
            if (usersTable.getValueAt(i, 5) != null)
                permission_i[3] = Boolean.valueOf(usersTable.getValueAt(i, 5).toString());

            // get the selected role and set the current
            RoleDto role = new RoleDto(allRoles.get(roleCombo.getSelectedIndex()).getCode());
            role.setRole_id(allRoles.get(roleCombo.getSelectedIndex()).getRole_id());
            role.setPermissionType(Utilities.convertTOBase10(permission_i));
            // each row is a screen
            ScreenDto screen = new ScreenDto(Integer.parseInt(usersTable.getValueAt(i, 0).toString()));
            screen.setRole_Screen(role);
            screens.add(screen);

        }
        return screens;
    }
}
