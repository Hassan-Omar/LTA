

package com.fym.lta.ui;

import com.fym.lta.bao.BaoFactory;
import com.fym.lta.bao.CourseBao;
import com.fym.lta.bao.EmployeeBao;
import com.fym.lta.bao.LoginEngine;
import com.fym.lta.bao.SchedualBao;
import com.fym.lta.common.LTAException;
import com.fym.lta.dto.CourseDto;
import com.fym.lta.dto.DepartmentDto;
import com.fym.lta.dto.EmployeeDto;
import com.fym.lta.dto.LocationDto;
import com.fym.lta.dto.LocationTypeDto;
import com.fym.lta.dto.SchedualDto;
import com.fym.lta.dto.SlotDto;

import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.event.KeyListener;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import javax.swing.table.TableCellRenderer;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

public class ScheduleInsert extends javax.swing.JPanel {
    @SuppressWarnings("oracle.jdeveloper.java.serialversionuid-stale")
    private static final long serialVersionUID = 1L;

    private SchedualBao schedualBao = new BaoFactory().createSchedualBao();
    private List<SchedualDto> searchSchedual;
    boolean SchedualAvailabilty = true;
    private KeyListener listener;

    /** Creates new form ScheduleInsert */
    public ScheduleInsert() {
        initComponents();
        table_Panel.setVisible(false);
        if (schedualBao.listAll() != null)
            TableReset(schedualBao.listAll());
        this.requestFocus();
        this.addKeyListener(listener);
        // roleID = 14
        // now one step we will create an object of ScreenBao to know the current permission
        int permissionType = new BaoFactory().createScreenBao().getCurrentPermission(14);
        Utilities.mandate(viewBtn, insertBTN, deleteBTN, 14, Utilities.convertTOBase2(permissionType));
        insertBTN.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\insert.png")); // NOI18N
        searchBTN.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\search.png")); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\search2.png")); // NOI18N
        deleteBTN.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\delete.png")); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 0, 280, 50));
        viewBtn.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\view.png")); // NOI18N

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        popup = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        insertBTN = new javax.swing.JButton();
        searchBTN = new javax.swing.JButton();
        ScheduleCode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        deleteBTN = new javax.swing.JButton();
        table_Panel = new javax.swing.JPanel();
        dep = new javax.swing.JLabel();
        acdYear = new javax.swing.JLabel();
        tCode = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        viewBtn = new javax.swing.JButton();

        jMenuItem1.setText("Print");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        popup.add(jMenuItem1);

        jMenuItem2.setText("Expor to PDF");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        popup.add(jMenuItem2);

        jMenuItem3.setText("Export to XLX");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        popup.add(jMenuItem3);

        jMenuItem4.setText("Hide the content");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        popup.add(jMenuItem4);

        setBackground(new java.awt.Color(0, 0, 0));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 240, 240)), "Schedules", 0, 0, new java.awt.Font("Tekton Pro Cond", 1, 36), new java.awt.Color(204, 240, 240))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setBackground(new java.awt.Color(51, 98, 114));
        table.setFont(new java.awt.Font("Tekton Pro Cond", 0, 18)); // NOI18N
        table.setForeground(new java.awt.Color(255, 255, 255));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SCHEDULECODE", "AcademicYear", "CodeDeparment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(25);
        table.setSelectionBackground(new java.awt.Color(22, 224, 236));
        jScrollPane1.setViewportView(table);
        table.getColumnModel().getColumn(0).setResizable(false);
        table.getColumnModel().getColumn(0).setHeaderValue("SCHEDULECODE");
        table.getColumnModel().getColumn(1).setResizable(false);
        table.getColumnModel().getColumn(1).setHeaderValue("AcademicYear");
        table.getColumnModel().getColumn(2).setResizable(false);
        table.getColumnModel().getColumn(2).setHeaderValue("CodeDeparment");

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 45, 340, 270));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 350, 320));

        insertBTN.setBackground(new java.awt.Color(0, 0, 0));
        insertBTN.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        insertBTN.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\insert.png")); // NOI18N
        insertBTN.setBorderPainted(false);
        insertBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insertBTNMouseClicked(evt);
            }
        });
        add(insertBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 160, 120, 30));

        searchBTN.setBackground(new java.awt.Color(0, 0, 0));
        searchBTN.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchBTN.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\search.png")); // NOI18N
        searchBTN.setBorderPainted(false);
        searchBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBTNMouseClicked(evt);
            }
        });
        add(searchBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, 80, 50));

        ScheduleCode.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ScheduleCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleCodeActionPerformed(evt);
            }
        });
        add(ScheduleCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 230, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\search2.png")); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 110, 30));

        deleteBTN.setBackground(new java.awt.Color(0, 0, 0));
        deleteBTN.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteBTN.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\delete.png")); // NOI18N
        deleteBTN.setBorderPainted(false);
        deleteBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBTNMouseClicked(evt);
            }
        });
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });
        add(deleteBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, 80, 30));

        table_Panel.setBackground(new java.awt.Color(51, 98, 114));
        table_Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        table_Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dep.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dep.setForeground(new java.awt.Color(255, 255, 255));
        dep.setText("Department   :  ");
        table_Panel.add(dep, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 150, 30));

        acdYear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        acdYear.setForeground(new java.awt.Color(255, 255, 255));
        acdYear.setText("Academic Year  : ");
        table_Panel.add(acdYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 150, 30));

        tCode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tCode.setForeground(new java.awt.Color(255, 255, 255));
        tCode.setText("Table Code   : ");
        table_Panel.add(tCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 160, 30));

        jScrollPane2.setAutoscrolls(true);
        table_Panel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 830, 480));

        add(table_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, 860, 580));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\sch.png")); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 0, 280, 50));

        viewBtn.setBackground(new java.awt.Color(0, 0, 0));
        viewBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        viewBtn.setIcon(new javax.swing.ImageIcon("C:\\Oracle\\Middleware\\LTA\\icons\\view.png")); // NOI18N
        viewBtn.setBorderPainted(false);
        viewBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewBtnMouseClicked(evt);
            }
        });
        add(viewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 120, 30));
    }//GEN-END:initComponents

    private void insertBTNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertBTNMouseClicked
        readXLX();

    }//GEN-LAST:event_insertBTNMouseClicked

    private void searchBTNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBTNMouseClicked
        table_Panel.setVisible(false);
        if (ScheduleCode.getText() != null) {
            searchSchedual = schedualBao.SearchSchedual(ScheduleCode.getText());
        } else {
            searchSchedual = schedualBao.listAll();
        }

        if (searchSchedual == null) {
            JOptionPane.showMessageDialog(this, "not found");


        }

        else
            TableReset(searchSchedual);

    }//GEN-LAST:event_searchBTNMouseClicked

    private void deleteBTNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBTNMouseClicked

        table_Panel.setVisible(false);
        if (table.getSelectedRow() >= 0) {
            String selectedCode = table.getValueAt(table.getSelectedRow(), 0).toString();
            // call business to delete
            // don't forget you need to update the users table and remove this record
            // and check the returned value to tell the user if the delete is done or not
            int msg = JOptionPane.showConfirmDialog(this, "are you sure you need to delete ");
            if (msg == JOptionPane.OK_OPTION) {
                if (schedualBao.deleteSchedual(selectedCode)) {
                    JOptionPane.showMessageDialog(this, "Deleted successfully"); // tell the user that we done it
                    // reset the table's content

                    TableReset(schedualBao.listAll());

                } else {
                    JOptionPane.showMessageDialog(this, "Can not delete may be deleted using another user ");
                }
            }
        }

        else { // this means that the user no selection on table
            JOptionPane.showMessageDialog(this, "you should select a user first to delete  ");
        }
    }//GEN-LAST:event_deleteBTNMouseClicked

    private void ScheduleCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ScheduleCodeActionPerformed

    private void viewBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewBtnMouseClicked
        if (table.getSelectedRow() >= 0) {
            table_Panel.setVisible(true);
            tCode.setText( tCode.getText() +table.getValueAt(table.getSelectedRow(), 0).toString() );
            acdYear.setText( acdYear.getText() +table.getValueAt(table.getSelectedRow(), 1).toString() );
            dep.setText( dep.getText() +table.getValueAt(table.getSelectedRow(), 3).toString() );
 
            SchedualDto sch = schedualBao.getSlectedTable(table.getValueAt(table.getSelectedRow(), 0).toString());
            List<SlotDto>  slots = new ArrayList<>();
            
         slots = sch.getSchedual_Slots(); ;
            
            SlotDto slot = new SlotDto();
            //Set staff name and dgree 
            EmployeeDto staff = new EmployeeDto();
            staff.setCareerDgree("Eng");
            staff.setFName("Fatma");
            staff.setSName("mohamed");
            slot.setCrrentStaffMemb(staff);
            //set Course name and code
            CourseDto Course = new CourseDto();
            Course.setName("Calculus III and Linar Algebra");
            Course.setCode("MAT102");
            slot.setCurrentCourse(Course);
            //set Location
            LocationDto loc = new LocationDto();
            loc.setCode("Not assigned");
            slot.setCurrentLocation(loc);
            //set Slot ID 
            slot.setCode(4);                   
            slots.add(slot);
            //+++++++++++++++++++++
            SlotDto slot2 = new SlotDto();

            //Set staff name and dgree 
            EmployeeDto staff2 = new EmployeeDto();
            staff2.setCareerDgree("Eng");
            staff2.setFName("Abdallah");
            staff2.setSName("Salma");
            slot2.setCrrentStaffMemb(staff2);
            //set Course name and code
            CourseDto Course2 = new CourseDto();
            Course2.setName("oscillation and optics");
            Course2.setCode("PHY 103555");
            slot2.setCurrentCourse(Course2);
            //set Location
            LocationDto loc2 = new LocationDto();
            loc2.setCode("Not assigned");
            slot2.setCurrentLocation(loc2);
            //set Slot ID 
            slot2.setCode(10);                   
            slots.add(slot2);
            //+++++++++++++++++++++
            SlotDto slot3 = new SlotDto();

            //Set staff name and dgree 
            EmployeeDto staff3 = new EmployeeDto();
            staff3.setCareerDgree("DR");
            staff3.setFName("Hamed");
            staff3.setSName("el tahan");
            slot3.setCrrentStaffMemb(staff3);
            //set Course name and code
            CourseDto Course3 = new CourseDto();
            Course3.setName("Mechanical Engineering1");
            Course3.setCode("MPE105");
            slot3.setCurrentCourse(Course3);
            //set Location
            LocationDto loc3 = new LocationDto();
            loc3.setCode("Not assigned");
            slot3.setCurrentLocation(loc3);
            slot3.setCode(19);                   
           slots.add(slot3); 
           /* ////////////
           SlotDto slot1 = new SlotDto();

           //Set staff name and dgree 
           EmployeeDto staff1 = new EmployeeDto();
           staff1.setCareerDgree("DR");
           staff1.setFName("Ahmed ");
           staff1.setSName("Abd elLatef");
           slot1.setCrrentStaffMemb(staff1);
           //set Course name and code
           CourseDto Course1= new CourseDto();
           Course1.setName(" oscillation and optics");
           Course1.setCode("PHY1045");
           slot1.setCurrentCourse(Course1);
           //set Location
           LocationDto loc1 = new LocationDto();
           loc1.setCode("Not assigned");
           slot1.setCurrentLocation(loc3);
           slot1.setCode(1);                   
           //slots.add(slot1); */
           

            drawtable(slots);
        } else
            JOptionPane.showMessageDialog(null, "select a table to view"); 
    }//GEN-LAST:event_viewBtnMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Utilities.printRecord(table_Panel);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
     
        Utilities.export_PDF(tableshow);
 
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        Utilities.export_XLX(tableshow);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

        if (evt.isPopupTrigger()) {
            popup.show(this, evt.getX(), evt.getY());
        }
       
    }//GEN-LAST:event_formMouseReleased

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        table_Panel.setVisible(false);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteBTNActionPerformed

    public void TableReset(List<SchedualDto> scheduals) {

        Object[][] schedualArr = new Object[scheduals.size()][4];

        for (int i = 0; i < scheduals.size(); i++) {

            schedualArr[i][0] = scheduals.get(i).getSCHEDULECODE();
            schedualArr[i][1] = scheduals.get(i).getAcademicYear();
            schedualArr[i][2] = scheduals.get(i).getStudent_number();
            schedualArr[i][3] = scheduals.get(i).getCodeDeparment();

        }
        table.setModel(new javax.swing.table.DefaultTableModel(schedualArr, new String[] {
                                                               "Scheduale Code", "Academic Year", "Student Numbers",
                                                               " Deparment Codec"
            }));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ScheduleCode;
    private javax.swing.JLabel acdYear;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JLabel dep;
    private javax.swing.JButton insertBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu popup;
    private javax.swing.JButton searchBTN;
    private javax.swing.JLabel tCode;
    private javax.swing.JTable table;
    private javax.swing.JPanel table_Panel;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
   

    
    // this method implmented by mina
    private String[] string_splitter(String Word) {
        // types of the charchters that will be in the name
        String result[] = Word.split("[/ ,.-]");
        String name[] = new String[5];
        try {
            for (int i = 0, j = 0; i < result.length; i++, j++) {
                if (result[i].toLowerCase().equalsIgnoreCase("el") || result[i].toLowerCase().equalsIgnoreCase("abd") ||
                    result[i].toLowerCase().equalsIgnoreCase("abd_el")) {
                    name[j] = result[i].concat(" ").concat(result[++i]);

                }

                else
                    name[j] = result[i];
            }
            System.out.println(Arrays.toString(name));
        } catch (Exception e) {
            System.out.println(e);
        } 
         
        return name;
    }


    void readXLX() {

        //Choose XLS FILE
        JFileChooser Chooser = new JFileChooser();
        int Variable = Chooser.showOpenDialog(null);


        if (Variable == JFileChooser.APPROVE_OPTION) {

            try {


                HSSFWorkbook lta = new HSSFWorkbook(new FileInputStream(Chooser.getSelectedFile()));
                HSSFSheet Sheet = lta.getSheet("Sheet0");
                HSSFRow Deparment = Sheet.getRow(0); // Row (1)
                HSSFRow Acadimcyear = Sheet.getRow(1); // Row (2)
                HSSFRow SCHEDULECODE = Sheet.getRow(2); // Row (2)


                // rows
                SchedualDto schudel = new SchedualDto();

                List<SlotDto> slots = new ArrayList<>();
                SchedualBao SchedualBao = new BaoFactory().createSchedualBao();
                EmployeeBao EmployeeBao = new BaoFactory().createemployeeBao();
                CourseBao CourseBao = new BaoFactory().createCourseBao();

                float temp = Float.parseFloat(Acadimcyear.getCell(1).toString());
                int acadYear = (int) temp;
                schudel.setAcademicYear(acadYear);
                schudel.setSCHEDULECODE(SCHEDULECODE.getCell(1).toString());
                schudel.setCodeDeparment(Deparment.getCell(1).toString());
                float temp1 = Float.parseFloat(Acadimcyear.getCell(3).toString());
                int num = (int) temp1;
                schudel.setStudent_number(num);
                int slotCode = 1;

                List<CourseDto> courses = new ArrayList<>();
                List<EmployeeDto> employees = new ArrayList<>();
                for (int i = 5; i < 30; i += 5) {

                    HSSFRow courseName = Sheet.getRow(i);
                    HSSFRow StaffName1 = Sheet.getRow(i + 1);
                    HSSFRow StaffName2 = Sheet.getRow(i + 2);
                    HSSFRow Type = Sheet.getRow(i + 3);
                    HSSFRow PrefSpace = Sheet.getRow(i + 4);

                    for (int k = 1; k < 9; k += 2) {
                        EmployeeDto instructor = new EmployeeDto();
                        EmployeeDto instructor2 = new EmployeeDto();
                        CourseDto course = new CourseDto();
                        List<EmployeeDto> instructors = new ArrayList<>();

                        instructor.setEmail(StaffName1.getCell(k + 1).toString()+"@fayoum.edu.eg");
                        // you need to cut the string and set the name as comming +++++++++
                        // use string cut or any format
                        //+++++++++++++++++++++++++++++++++++++++
                        try {
                            String[] enteredName = string_splitter(StaffName1.getCell(k).toString());
                            instructor.setFName(enteredName[1]);
                            instructor.setSName(enteredName[2]);
                            if (enteredName[3] != null)
                                instructor.setLName(enteredName[3]);
                            if (enteredName[4] != null)
                                instructor.setFamilyName(enteredName[4]);
                            instructor.setCareerDgree(enteredName[0]);


                        } catch (Exception e) {

                            e.printStackTrace();
                        }


                        //+++++++++++++++++++++++++++++++++++++++
                        instructor.setInsertedBy(LoginEngine.currentUser);
                        instructor.setUpdatedBy(LoginEngine.currentUser);
                        instructor.setInertion_Date(new Date(System.currentTimeMillis()));
                        instructor.setUpdate_Date(new Date(System.currentTimeMillis()));
                        DepartmentDto department = new DepartmentDto();
                        department.setCode(schudel.getCodeDeparment());
                        instructor.setDepartment(department);
                        instructors.add(instructor);
                        if((instructor.getFName()!=null && instructor.getSName()!=null)&&(instructor.getFName()!="" && instructor.getSName()!=""))
                        employees.add(instructor);
                        /*  // second instructor 
                        {
                            instructor2.setEmail(StaffName2.getCell(k + 1).toString()+"@fayoum.edu.eg");
                            // you need to cut the string and set the name as comming +++++++++
                            // use string cut or any format
                            //+++++++++++++++++++++++++++++++++++++++
                            try {
                                String[] enteredName = string_splitter(StaffName2.getCell(k).toString());
                                instructor.setFName(enteredName[1]);
                                instructor2.setSName(enteredName[2]);
                                if (enteredName[3] != null)
                                    instructor2.setLName(enteredName[3]);
                                if (enteredName[4] != null)
                                    instructor2.setFamilyName(enteredName[4]);
                                instructor2.setCareerDgree(enteredName[0]);


                            } catch (Exception e) {

                                e.printStackTrace();
                            }


                            //+++++++++++++++++++++++++++++++++++++++
                            instructor2.setInsertedBy(LoginEngine.currentUser);
                            instructor2.setUpdatedBy(LoginEngine.currentUser);
                            instructor2.setInertion_Date(new Date(System.currentTimeMillis()));
                            instructor2.setUpdate_Date(new Date(System.currentTimeMillis()));
                            DepartmentDto department2 = new DepartmentDto();
                            department.setCode(schudel.getCodeDeparment());
                            instructor2.setDepartment(department2);
                            instructors.add(instructor2);
                            if((instructor2.getFName()!=null && instructor2.getSName()!=null)&&(instructor2.getFName()!="" && instructor2.getSName()!=""))
                            employees.add(instructor2);
   
                            
                        } */
                        course.setInstructors(instructors);
                        course.setCode(courseName.getCell(k + 1).toString());
                        course.setName(courseName.getCell(k).toString());
                        course.setInsertedBy(LoginEngine.currentUser);
                        course.setUpdatedBy(LoginEngine.currentUser);
                        course.setInertion_Date(new Date(System.currentTimeMillis()));
                        course.setUpdate_Date(new Date(System.currentTimeMillis()));

                        DepartmentDto department_course = new DepartmentDto();
                        department_course.setCode(schudel.getCodeDeparment());
                        course.setDepartment(department_course);

                        LocationTypeDto locType = new LocationTypeDto();
                        locType.setCode(PrefSpace.getCell(k + 1).toString());
                        course.setNeededLocType(locType);
                       
                        if((course.getCode()!=null && course.getName()!=null)&&(course.getCode()!="" && course.getName()!=""))
                        courses.add(course);


                        SlotDto slot = new SlotDto();
                        slot.setCode(slotCode);
                        slot.setCurrentCourse(course);
                        slot.setPrefSpace(PrefSpace.getCell(k + 1).toString());
                        slot.setType(Type.getCell(k + 1).toString());
                        
                        if((slot.getCurrentCourse().getCode()!=null && slot.getCurrentCourse().getName()!=null)&&(slot.getCurrentCourse().getCode()!="" && slot.getCurrentCourse().getName()!=""))
                        slots.add(slot);
                        
                        slotCode++;

                       
                    } // end of inner loop

                } // end of outer loop


                /* 
                try {
                    // save the department
                    DepartmentDto dep = new DepartmentDto();
                    dep.setName(Deparment.getCell(0).toString());
                    dep.setCode(Deparment.getCell(1).toString());
                    dep.setInsertedBy(LoginEngine.currentUser);
                    dep.setUpdatedBy(LoginEngine.currentUser);
                    dep.setInertion_Date(new Date(System.currentTimeMillis()));
                    dep.setUpdate_Date(new Date(System.currentTimeMillis()));
                    new BaoFactory().createDepartmentBao().saveDepartment(dep);


                    CourseBao.saveCourses(courses);
                    EmployeeBao.saveEmployees(employees);

                } catch (LTAException ltae) {
                  JOptionPane.showMessageDialog(this, "Error "+ltae.getMessage());
                } */
                schudel.setSchedual_Slots(slots);

                try {
                    if (SchedualBao.saveSchedual(schudel))
                        JOptionPane.showMessageDialog(this, " saved");
                    else
                        JOptionPane.showMessageDialog(this, "don't save");
                } catch (LTAException ltae) {

                    JOptionPane.showMessageDialog(this, "don't save Error in DB");
                } catch (HeadlessException he) {
                   
                    he.printStackTrace();
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }


    //inside button

    private void writeToExcel(SchedualDto schedule) 
    {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String filepath = fileChooser.getSelectedFile().getAbsolutePath();
            File file = new File(filepath + ".xls");
            if (file.exists() == false) {
                HSSFWorkbook workbook = new HSSFWorkbook();
                HSSFSheet Sheet = workbook.createSheet();
                HSSFRow DepartmentCodeRow = Sheet.createRow(0);
                HSSFRow AcademicYearRow = Sheet.createRow(1);
                HSSFRow ScheduleCodeRow = Sheet.createRow(2);
                HSSFRow TimeSlotRow = Sheet.createRow(3);
                HSSFRow RowAfterTimeSlot = Sheet.createRow(4);


                AcademicYearRow.createCell(1).setCellValue(schedule.getAcademicYear());
                DepartmentCodeRow.createCell(0).setCellValue(schedule.getDepartment().getName());
                DepartmentCodeRow.createCell(1).setCellValue(schedule.getCodeDeparment());
                ScheduleCodeRow.createCell(0).setCellValue("SCHEDULECODE");
                ScheduleCodeRow.createCell(1).setCellValue(schedule.getSCHEDULECODE());
                AcademicYearRow.createCell(2).setCellValue("STUDENT NUMBER");
                AcademicYearRow.createCell(3).setCellValue(schedule.getStudent_number());
                TimeSlotRow.createCell(0).setCellValue("Time slot");
                TimeSlotRow.createCell(1).setCellValue("1st slot");
                TimeSlotRow.createCell(3).setCellValue("2nd slot");
                TimeSlotRow.createCell(5).setCellValue("3rd slot");
                TimeSlotRow.createCell(7).setCellValue("4th slot");
                for (int i = 1; i < 8; i += 2)
                {
                    RowAfterTimeSlot.createCell(i).setCellValue("start-end");
                }
                RowAfterTimeSlot.createCell(2).setCellValue("8.50");
                RowAfterTimeSlot.createCell(4).setCellValue("10.20");
                RowAfterTimeSlot.createCell(6).setCellValue("12.30");
                RowAfterTimeSlot.createCell(8).setCellValue("2");
                HSSFRow row1 = Sheet.createRow(5);
                row1.createCell(0).setCellValue("Sunday");
                HSSFRow row2 = Sheet.createRow(10);
                row2.createCell(0).setCellValue("Monday");
                HSSFRow row3 = Sheet.createRow(15);
                row3.createCell(0).setCellValue("Tuesday");
                HSSFRow row4 = Sheet.createRow(20);
                row4.createCell(0).setCellValue("Wednesday");
                HSSFRow row5 = Sheet.createRow(25);
                row5.createCell(0).setCellValue("Thursday");

                for (int i = 5; i < 30; i += 5) {
                    HSSFRow courseNameRow = Sheet.createRow(i);
                    HSSFRow StaffNameRow = Sheet.createRow(i + 1);
                    HSSFRow TypeRow = Sheet.createRow(i + 3);
                    HSSFRow PrefSpaceRow = Sheet.createRow(i + 4);

                    for (int k = 1; k < 9; k += 2) {
                        EmployeeDto instructor = new EmployeeDto();
                        StaffNameRow.createCell(k).setCellValue(instructor.getCareerDgree() + " " +
                                                                instructor.getFName() + " " + instructor.getSName() +
                                                                " " + instructor.getLName() + " " +
                                                                instructor.getFamilyName());

                        CourseDto course = new CourseDto();
                        courseNameRow.createCell(k + 1).setCellValue(course.getCode());
                        courseNameRow.createCell(k).setCellValue(course.getName());

                        LocationTypeDto loctionType = new LocationTypeDto();
                        TypeRow.createCell(k).setCellValue("Type");
                        TypeRow.createCell(k + 1).setCellValue(loctionType.getCode());
                        PrefSpaceRow.createCell(k).setCellValue("PrefSpace");
                        PrefSpaceRow.createCell(k + 1).setCellValue(course.getNeededLocType().getCode());
                    } // end of inner loop
                } // end of outer loop
                try (
                //Write the workbook in file
                FileOutputStream out = new FileOutputStream(file)) {
                    workbook.write(out);
                    JOptionPane.showMessageDialog(this, "File Saved Successfully ");
                } catch (IOException e) {
                    System.out.println("error");
                }
            }

            else { // Sheet already exists
                JOptionPane.showMessageDialog(this, "File already exist");
            }

        } else { // Sheet already exists
            JOptionPane.showMessageDialog(this, "User cancelled  ");
        }

    }
    DefaultTableModel dm ;
      JTable tableshow  ;   
    public void drawtable( List<SlotDto> slots) 
                   {

               Object[][] schedualArr = new Object[5][5];

               schedualArr[0][0] = "Sunday";
               schedualArr[1][0] = "Monday";
               schedualArr[2][0] = "Tuesday";
               schedualArr[3][0] = "Wednesday";
               schedualArr[4][0] = "Thursday";

           for (int i = 0; i < slots.size(); i++) 
           {
                   
               //slot 1
               if (slots.get(i).getCode() == 1) {

                   schedualArr[0][1] =
                       slots.get(i).getCurrentCourse().getName() + " " + "\n" + slots.get(i).getCurrentCourse().getCode() + " " +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       " " + slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() + " " +
                       "\n" +  " " +slots.get(i).getCurrentLocation().getCode();
               }
               //slot 2
               else if (slots.get(i).getCode() == 2) {

                   schedualArr[0][2] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 3
               else if (slots.get(i).getCode() == 3) {

                   schedualArr[0][3] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 4
               else if (slots.get(i).getCode() == 4) {

                   schedualArr[0][4] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 5
               else if (slots.get(i).getCode() == 5) {

                   schedualArr[1][1] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }

               //slot 6
               else if (slots.get(i).getCode() == 6) {

                   schedualArr[1][2] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 7
               else if (slots.get(i).getCode() == 7) {

                   schedualArr[1][3] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 8
               else if (slots.get(i).getCode() == 8) {

                   schedualArr[1][4] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 9
               else if (slots.get(i).getCode() == 9) {

                   schedualArr[2][1] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }

               //slot 10
               else if (slots.get(i).getCode() == 10) {

                   schedualArr[2][2] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 11
               else if (slots.get(i).getCode() == 11) {

                   schedualArr[2][3] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 12
               else if (slots.get(i).getCode() == 12) {

                   schedualArr[2][4] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 13
               else if (slots.get(i).getCode() == 13) {

                   schedualArr[3][1] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 14
               else if (slots.get(i).getCode() == 14) {

                   schedualArr[3][2] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 15
               else if (slots.get(i).getCode() == 15) {

                   schedualArr[3][3] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 16
               else if (slots.get(i).getCode() == 16) {

                   schedualArr[3][4] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 17
               else if (slots.get(i).getCode() == 17) {

                   schedualArr[4][1] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 18
               else if (slots.get(i).getCode() == 18) {

                   schedualArr[4][2] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 19
               else if (slots.get(i).getCode() == 19) {

                   schedualArr[4][3] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
               //slot 20
               else if (slots.get(i).getCode() == 20) {

                   schedualArr[4][4] =
                       slots.get(i).getCurrentCourse().getName() + "\n" + slots.get(i).getCurrentCourse().getCode() +
                       "\n" + slots.get(i).getCrrentStaffMemb().getCareerDgree() + " " +
                       slots.get(i).getCrrentStaffMemb().getFName() + " " + slots.get(i).getCrrentStaffMemb().getSName() +
                       "\n" + slots.get(i).getCurrentLocation().getCode();

               }
                   
    
                                   
               }
               
             dm = new DefaultTableModel() 
                   {
                 public Class getColumnClass(int columnIndex) 
                 {
                   return String.class;
                 }};
               
               
             dm.setDataVector(schedualArr, new Object[] { "Day","slot 1", "slot 2", "slot 3","slot 4" });

               tableshow = new JTable(dm);

               int lines = 5;
               tableshow.setRowHeight(tableshow.getRowHeight() * lines);
               
               tableshow.setDefaultRenderer(String.class, new MultiLineCellRenderer());
              jScrollPane2.setViewportView(tableshow);
               tableshow.enable(false);
               setSize(500, 400);
               setVisible(true);
           
           }
    class MultiLineCellRenderer extends JTextArea implements TableCellRenderer 
       {

         public Component getTableCellRendererComponent(JTable table, Object value,
            
           boolean isSelected, boolean hasFocus, int row, int column) 
         {
           if (isSelected) 
           {
             setForeground(table.getSelectionForeground());
             setBackground(table.getSelectionBackground());
           } else 
           {
             setForeground(table.getForeground());
             setBackground(table.getBackground());
           }
           setFont(table.getFont());
           if (hasFocus)
           {
             setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));
             if (table.isCellEditable(row, column)) {
               setForeground(UIManager.getColor("Table.focusCellForeground"));
               setBackground(UIManager.getColor("Table.focusCellBackground"));
             }
           } else 
           {
             setBorder(new EmptyBorder(1, 2, 1, 2));
           }
           setText((value == null) ? "" : value.toString());
           return this;
         }

       }
}
